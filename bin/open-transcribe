#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');
const os = require('os');
const fs = require('fs');

// Get the package installation directory
const packageDir = path.resolve(__dirname, '..');
const platform = os.platform();

console.log('üéôÔ∏è Starting Open-Transcribe...');

function runApplication() {
    let command, args, options;
    
    if (platform === 'win32') {
        // Windows
        const exePath = path.join(packageDir, 'Windows_installer', 'OpenTranscribe.exe');
        if (fs.existsSync(exePath)) {
            command = exePath;
            args = [];
        } else {
            // Fallback to Python
            command = 'python';
            args = [path.join(packageDir, 'src', 'main.py')];
        }
    } else {
        // Linux/macOS
        const linuxExe = path.join(packageDir, 'linux', 'dist', 'OpenTranscribe', 'OpenTranscribe');
        const venvPython = path.join(packageDir, 'linux', '.venv', 'bin', 'python');
        
        if (fs.existsSync(linuxExe)) {
            // Use built executable if available
            command = linuxExe;
            args = [];
        } else if (fs.existsSync(venvPython)) {
            // Use virtual environment Python
            command = venvPython;
            args = [path.join(packageDir, 'src', 'main.py')];
        } else {
            // Fallback to system Python
            command = 'python3';
            args = [path.join(packageDir, 'src', 'main.py')];
        }
    }
    
    options = {
        cwd: packageDir,
        stdio: 'inherit',
        env: {
            ...process.env,
            // Reduce ALSA warnings on Linux
            ALSA_CARD: '1',
            PULSE_RUNTIME_PATH: `/run/user/${process.getuid()}/pulse`
        }
    };
    
    const child = spawn(command, args, options);
    
    child.on('error', (error) => {
        console.error('‚ùå Failed to start Open-Transcribe:', error.message);
        console.log('\nüí° Try running the setup again:');
        console.log('   npm run postinstall');
        process.exit(1);
    });
    
    child.on('close', (code) => {
        if (code !== 0) {
            console.log(`\nüëã Open-Transcribe exited with code ${code}`);
        }
        process.exit(code);
    });
}

// Check if setup is needed
const setupMarker = path.join(packageDir, '.open-transcribe-setup-complete');
if (!fs.existsSync(setupMarker)) {
    console.log('‚öôÔ∏è First run detected. Running setup...');
    
    const setupScript = path.join(packageDir, 'scripts', 'postinstall.js');
    const setupProcess = spawn('node', [setupScript], {
        cwd: packageDir,
        stdio: 'inherit'
    });
    
    setupProcess.on('close', (code) => {
        if (code === 0) {
            runApplication();
        } else {
            console.error('‚ùå Setup failed');
            process.exit(1);
        }
    });
} else {
    runApplication();
}